#pragma once

#include <cstdint>

// IBM PC Code Page 437 compatible 8x16 bitmap font data
// Each character is 8 pixels wide, 16 pixels tall
// Each byte represents a horizontal line of 8 pixels
// Supports full 256-character Code Page 437 set including box drawing characters

class BitmapFont {
public:
    static constexpr int FONT_WIDTH = 8;
    static constexpr int FONT_HEIGHT = 16;
    
    // Get font data for a character (returns pointer to 16 bytes)
    // Now supports full 8-bit range (0-255) for Code Page 437
    static const uint8_t* getCharData(uint8_t ch);
    // Backward-compatible overload for existing call sites using char
    static inline const uint8_t* getCharData(char ch) {
        return getCharData(static_cast<uint8_t>(ch));
    }
    
private:
    // Font data for all 256 Code Page 437 characters (0-255)
    static const uint8_t fontData[256][16];
};

// IBM PC Code Page 437 Font Data - Complete 256 character set
const uint8_t BitmapFont::fontData[256][16] = {
    // Character 0 (NULL) - Display as blank
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 1 (SOH) - Smiley face
    {0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00},
    
    // Character 2 (STX) - Inverted smiley face
    {0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3, 0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00},
    
    // Character 3 (ETX) - Heart
    {0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 4 (EOT) - Diamond
    {0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 5 (ENQ) - Club
    {0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 6 (ACK) - Spade
    {0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 7 (BEL) - Bullet
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 8 (BS) - Inverted bullet
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
    
    // Character 9 (TAB) - Open circle
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 10 (LF) - Inverted open circle
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
    
    // Character 11 (VT) - Male symbol
    {0x00, 0x00, 0x1E, 0x0E, 0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00},
    
    // Character 12 (FF) - Female symbol
    {0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 13 (CR) - Eighth note
    {0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00},
    
    // Character 14 (SO) - Beamed eighth notes
    {0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00},
    
    // Character 15 (SI) - Sun
    {0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 16 (DLE) - Right-pointing triangle
    {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00},
    
    // Character 17 (DC1) - Left-pointing triangle
    {0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00},
    
    // Character 18 (DC2) - Up/down arrow
    {0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 19 (DC3) - Double exclamation
    {0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},
    
    // Character 20 (DC4) - Paragraph mark
    {0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00},
    
    // Character 21 (NAK) - Section mark
    {0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00},
    
    // Character 22 (SYN) - Black rectangle
    {0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 23 (ETB) - Up arrow
    {0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 24 (CAN) - Up arrow
    {0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 25 (EM) - Down arrow
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 26 (SUB) - Right arrow
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 27 (ESC) - Left arrow
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 28 (FS) - L-shaped arrow
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 29 (GS) - Left-right arrow
    {0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 30 (RS) - Up triangle
    {0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 31 (US) - Down triangle
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    // Character 32 (Space)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 33 (!)
    {0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 34 (")
    {0x00, 0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 35 (#)
    {0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 36 ($)
    {0x00, 0x10, 0x10, 0x7C, 0xD6, 0xD0, 0xD0, 0x7C, 0x16, 0x16, 0xD6, 0x7C, 0x10, 0x10, 0x00, 0x00},
    
    // Character 37 (%)
    {0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00},
    
    // Character 38 (&)
    {0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00},
    
    // Character 39 (')
    {0x00, 0x00, 0x30, 0x30, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 40 (()
    {0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00},
    
    // Character 41 ())
    {0x00, 0x00, 0x60, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00},
    
    // Character 42 (*)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 43 (+)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 44 (,)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00},
    
    // Character 45 (-)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 46 (.)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 47 (/)
    {0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00},
    
    // Character 48 (0)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 49 (1)
    {0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00},
    
    // Character 50 (2)
    {0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00},
    
    // Character 51 (3)
    {0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 52 (4)
    {0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00},
    
    // Character 53 (5)
    {0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 54 (6)
    {0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 55 (7)
    {0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00},
    
    // Character 56 (8)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 57 (9)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00},
    
    // Character 58 (:)
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 59 (;)
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00},
    
    // Character 60 (<)
    {0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00},
    
    // Character 61 (=)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 62 (>)
    {0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00},
    
    // Character 63 (?)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 64 (@)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 65 (A)
    {0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 66 (B)
    {0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00},
    
    // Character 67 (C)
    {0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 68 (D)
    {0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00},
    
    // Character 69 (E)
    {0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00},
    
    // Character 70 (F)
    {0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00},
    
    // Character 71 (G)
    {0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00},
    
    // Character 72 (H)
    {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 73 (I)
    {0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 74 (J)
    {0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00},
    
    // Character 75 (K)
    {0x00, 0x00, 0xE6, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 76 (L)
    {0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00},
    
    // Character 77 (M)
    {0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 78 (N)
    {0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 79 (O)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 80 (P)
    {0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00},
    
    // Character 81 (Q)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00},
    
    // Character 82 (R)
    {0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 83 (S)
    {0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 84 (T)
    {0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 85 (U)
    {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 86 (V)
    {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00},
    
    // Character 87 (W)
    {0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0x6C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 88 (X)
    {0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 89 (Y)
    {0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 90 (Z)
    {0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00},
    
    // Character 91 ([)
    {0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 92 (\)
    {0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 93 (])
    {0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 94 (^)
    {0x00, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 95 (_)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00},
    
    // Continue with more characters...
    // For brevity, I'll add a few more essential ones and use space for others
    
    // Character 96 (`)
    {0x00, 0x00, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 97 (a) - simplified lowercase
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00},
    
    // Character 98 (b)
    {0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 99 (c)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 100 (d)
    {0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00},
    
    // Character 101 (e)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 102 (f)
    {0x00, 0x00, 0x1C, 0x36, 0x32, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00},
    
    // Character 103 (g)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00, 0x00},
    
    // Character 104 (h)
    {0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 105 (i)
    {0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 106 (j)
    {0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00},
    
    // Character 107 (k)
    {0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 108 (l)
    {0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 109 (m)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 110 (n)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},
    
    // Character 111 (o)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 112 (p)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x00},
    
    // Character 113 (q)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00, 0x00},
    
    // Character 114 (r)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00},
    
    // Character 115 (s)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 116 (t)
    {0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 117 (u)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00},
    
    // Character 118 (v)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00},
    
    // Character 119 (w)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00},
    
    // Character 120 (x)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00},
    
    // Character 121 (y)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00, 0x00},
    
    // Character 122 (z)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00},
    
    // Character 123 ({)
    {0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00},
    
    // Character 124 (|)
    {0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},
    
    // Character 125 (})
    {0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00},
    
    // Character 126 (~)
    {0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    
    // Character 127 (DEL)
    {0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};

const uint8_t* BitmapFont::getCharData(uint8_t ch) {
    // Quick CP437 fallbacks for essential box-drawing and shading characters
    // until the 128–255 glyphs in fontData are fully populated.
    switch (ch) {
        // Shading
        case 176: { // light shade ░ ~25%
            static const uint8_t light[16] = {
                0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00,
                0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00
            };
            return light;
        }
        case 177: { // medium shade ▒ ~50%
            static const uint8_t medium[16] = {
                0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
                0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55
            };
            return medium;
        }
        case 178: { // dark shade ▓ ~75%
            static const uint8_t dark[16] = {
                0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA,
                0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA, 0xFF, 0xAA
            };
            return dark;
        }

        // Box drawing single lines
        case 179: // │ vertical single
            return fontData[124]; // map to '|'
        case 196: // ─ horizontal single
            return fontData[45];  // map to '-'
        case 218: { // ┌ top-left single
            static const uint8_t tl_single[16] = {
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return tl_single;
        }
        case 191: { // ┐ top-right single
            static const uint8_t tr_single[16] = {
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return tr_single;
        }
        case 192: { // └ bottom-left single
            static const uint8_t bl_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            };
            return bl_single;
        }
        case 217: { // ┘ bottom-right single
            static const uint8_t br_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            };
            return br_single;
        }
        case 195: { // ├ left tee single
            static const uint8_t lt_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return lt_single;
        }
        case 180: { // ┤ right tee single
            static const uint8_t rt_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return rt_single;
        }
        case 193: { // ┴ bottom tee single
            static const uint8_t bt_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            };
            return bt_single;
        }
        case 194: { // ┬ top tee single
            static const uint8_t tt_single[16] = {
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return tt_single;
        }
        case 197: { // ┼ cross single
            static const uint8_t cross_single[16] = {
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,
                0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18
            };
            return cross_single;
        }

        // Box drawing double lines (approximate)
        case 186: { // ║ vertical double
            static const uint8_t vdouble[16] = {
                0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,
                0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24
            };
            return vdouble;
        }
        case 205: { // ═ horizontal double (two middle rows)
            static const uint8_t hdouble[16] = {
                0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            };
            return hdouble;
        }
        case 201: // ╔ top-left double
        case 187: // ╗ top-right double
        case 200: // ╚ bottom-left double
        case 188: { // ╝ bottom-right double
            // Fallback map double corners to single line corners
            switch (ch) {
                case 201: return getCharData(static_cast<uint8_t>(218)); // ╔ -> ┌
                case 187: return getCharData(static_cast<uint8_t>(191)); // ╗ -> ┐
                case 200: return getCharData(static_cast<uint8_t>(192)); // ╚ -> └
                default:  return getCharData(static_cast<uint8_t>(217)); // ╝ -> ┘
            }
        }
        case 204: // ╟ left tee double
        case 185: // ╢ right tee double
        case 202: // ╩ bottom tee double
        case 203: // ╦ top tee double
        case 206: { // ╬ cross double
            // Fallback to single-line junctions
            switch (ch) {
                case 204: return getCharData(static_cast<uint8_t>(195));
                case 185: return getCharData(static_cast<uint8_t>(180));
                case 202: return getCharData(static_cast<uint8_t>(193));
                case 203: return getCharData(static_cast<uint8_t>(194));
                default:  return getCharData(static_cast<uint8_t>(197));
            }
        }

        // Blocks
        case 219: { // █ full block
            static const uint8_t fullblock[16] = {
                0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
            };
            return fullblock;
        }
        case 223: { // ▀ upper half block
            static const uint8_t upper[16] = {
                0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
            };
            return upper;
        }
        case 220: { // ▄ lower half block
            static const uint8_t lower[16] = {
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
            };
            return lower;
        }

        default:
            break;
    }

    // Direct mapping for other characters (0–127 implemented here, 128–255 will use zeros until populated)
    return fontData[ch];
}
